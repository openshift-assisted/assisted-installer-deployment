pipeline {
    agent { label 'download_logs' }

    parameters {
        string(name: 'REMOTE_SERVICE_URL', defaultValue: 'https://api.openshift.com', description: 'Service URL')
        string(name: 'ASSISTED_INSTALLER_DEPLOYMENT_REMOTE', defaultValue: 'https://github.com/openshift-assisted/assisted-installer-deployment', description: 'assisted-installer-deployment repo URL to use')
        string(name: 'ASSISTED_INSTALLER_DEPLOYMENT_BRANCH', defaultValue: 'master', description: 'Branch on assisted-installer-deployment repo to use')
        string(name: 'ASSISTED_TEST_INFRA_REMOTE', defaultValue: 'https://github.com/openshift/assisted-test-infra', description: 'assisted-test-infra repo URL to use')
        string(name: 'ASSISTED_TEST_INFRA_BRANCH', defaultValue: 'master', description: 'Branch on assisted-test-infra repo to use')
    }

    triggers { cron('H/30 * * * *') }

    environment {
        SKIPPER_PARAMS = " "

        LOGS_DEST = "/var/ai-logs/triage_logs"

        // Credentials
        OFFLINE_TOKEN = credentials('admin_offline_token')
        JIRA_ACCESS_TOKEN = credentials('assisted-installer-bot-jira-access-token')
        SLACK_TOKEN = credentials('slack-token')
    }
    options {
      timeout(time: 90, unit: 'MINUTES')
    }

    stages {
        stage('Init') {
            steps {
                sh "rm -rf assisted-test-infra"
                sh "git clone ${ASSISTED_TEST_INFRA_REMOTE} --branch ${ASSISTED_TEST_INFRA_BRANCH}"
                dir ('assisted-test-infra') {
                    sh "scripts/install_environment.sh install_skipper"
                    sh "make image_build"
                }

                sh "rm -rf assisted-installer-deployment"
                sh "git clone ${ASSISTED_INSTALLER_DEPLOYMENT_REMOTE} --branch ${ASSISTED_INSTALLER_DEPLOYMENT_BRANCH}"
            }
        }

        stage('Cluster-logs') {
            steps {
                dir ('assisted-test-infra') {
                    sh "make download_cluster_logs"
                }

                dir ('assisted-installer-deployment') {
                    sh "skipper run ./tools/triage/attach_logs_in_jira.py --source-dir ${LOGS_DEST} --jira-access-token ${JIRA_ACCESS_TOKEN} --verbose"
                }
            }
        }

        stage('Create tickets') {
            steps {
                dir ('assisted-installer-deployment') {
                    sh "skipper run ./tools/triage/create_triage_tickets.py --jira-access-token ${JIRA_ACCESS_TOKEN} -v"
                }
            }
        }
    }

    post {
        failure {
            script {
                def data = [text: "Attention! ${BUILD_TAG} job failed, see: ${BUILD_URL}"]
                writeJSON(file: 'data.txt', json: data, pretty: 4)
            }
            sh '''curl -X POST -H 'Content-type: application/json' --data-binary "@data.txt"  https://hooks.slack.com/services/${SLACK_TOKEN}'''
        }
    }
}
